// Generated by CoffeeScript 1.6.3
(function() {
  var ScrollablePagination;

  ScrollablePagination = {};

  ScrollablePagination.Container = (function() {
    function Container($el, options) {
      this.$el = $el;
      if (options == null) {
        options = {};
      }
      this.initialize(options);
    }

    Container.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.originalOptions = $.extend({}, options);
      if (options.startPage == null) {
        options.startPage = 1;
      }
      this.fetchUrl = options.fetchUrl || this.$el.data('fetch-url');
      new ScrollablePagination.NextPageHandler(this.$el, this, options);
      return new ScrollablePagination.PreviousPageHandler(this.$el, this, options);
    };

    Container.prototype.loadPage = function(page, callback) {
      var _this = this;
      return $.get(this.pageUrl(page), function(resp) {
        return callback($.trim(resp));
      }, 'html');
    };

    Container.prototype.pageUrl = function(page) {
      var url;
      if (this.fetchUrl.match(/:page/)) {
        return this.fetchUrl.replace(/:page/, page);
      } else {
        url = this.fetchUrl;
        url += url.match(/\?/) ? '&' : '?';
        return url += "page=" + page;
      }
    };

    Container.prototype.reset = function(options) {
      return this.initialize(options || this.originalOptions);
    };

    return Container;

  })();

  ScrollablePagination.NextPageHandler = (function() {
    NextPageHandler.prototype._loadingHintTemplate = function(options) {
      return "<div class=\"scrollable-pagination-loader\">\n  " + options.loadingText + "\n</div>";
    };

    function NextPageHandler($el, container, options) {
      var _this = this;
      this.$el = $el;
      this.container = container;
      this.page = options.startPage;
      this.scrollableContainer = (function() {
        switch (false) {
          case options.scrollableContainer !== null:
            return this.$el;
          case !options.scrollableContainer:
            return $(options.scrollableContainer);
          default:
            return $(window);
        }
      }).call(this);
      this.scrollOffset = options.scrollOffset || 200;
      this.done = false;
      this.lastScrollHandlingCall = +(new Date());
      this.loading = false;
      this.loadingText = options.loadingText || 'Loading more ...';
      this.loadingHintTemplate = options.loadingHintTemplate || this._loadingHintTemplate({
        loadingText: loadingText
      });
      this.scrollableContainer.on('scroll', function() {
        return _this.handleScroll();
      });
    }

    NextPageHandler.prototype.handleScroll = function() {
      var threshold, time, top;
      if (this.done) {
        return;
      }
      time = +(new Date());
      if ((time - this.lastScrollHandlingCall) < 200 || this.done) {
        return this.resetScrollTimer(time);
      }
      this.lastScrollHandlingCall = time;
      top = this.scrollableContainer.scrollTop();
      threshold = this.loadThreshold();
      if (top > threshold && !this.loading) {
        return this.loadNextDataSet();
      }
    };

    NextPageHandler.prototype.resetScrollTimer = function(now) {
      var _this = this;
      if (this.scrollTimer) {
        clearTimeout(this.scrollTimer);
      }
      return this.scrollTimer = setTimeout((function() {
        return _this.handleScroll();
      }), 200);
    };

    NextPageHandler.prototype.loadThreshold = function() {
      return (this.$el.innerHeight() + this.$el.offset().top) - (this.scrollableContainer.innerHeight() + this.scrollOffset);
    };

    NextPageHandler.prototype.loadNextDataSet = function() {
      var _this = this;
      this.setLoadingState();
      return this.container.loadPage(++this.page, function(markup) {
        return _this.nextPageLoaded(markup);
      });
    };

    NextPageHandler.prototype.nextPageLoaded = function(markup) {
      var $markup;
      this.removeLoadingState();
      if (!markup) {
        return (this.done = true);
      }
      $markup = $(markup).appendTo(this.$el);
      return this.$el.trigger("pageloaded", [$markup]);
    };

    NextPageHandler.prototype.setLoadingState = function() {
      this.loading = true;
      this.$el.addClass('loading');
      return $(this.loadingHintTemplate).appendTo(this.$el);
    };

    NextPageHandler.prototype.removeLoadingState = function() {
      this.loading = false;
      return this.$el.removeClass('loading').find('.scrollable-pagination-loader').remove();
    };

    return NextPageHandler;

  })();

  ScrollablePagination.PreviousPageHandler = (function() {
    function PreviousPageHandler($el, container, options) {
      var _this = this;
      this.$el = $el;
      this.container = container;
      this.page = options.startPage;
      this.done = this.page === 1;
      this.loading = false;
      this.$previousDataButton = options.previousDataButton;
      this.$previousDataButton.on('click', function(e) {
        return _this.previousDataButtonClicked(e);
      });
    }

    PreviousPageHandler.prototype.previousDataButtonClicked = function(e) {
      this.loadPrevousDataSet();
      return false;
    };

    PreviousPageHandler.prototype.loadPrevousDataSet = function() {
      var _this = this;
      if (this.done) {
        return;
      }
      this.setLoadingState();
      this.container.loadPage(--this.page, function(markup) {
        return _this.previousPageLoaded(markup);
      });
      if (this.page === 1) {
        this.done = true;
        return this.$previousDataButton.remove();
      }
    };

    PreviousPageHandler.prototype.previousPageLoaded = function(markup) {
      var $firstChildren, $markup, scrollOffset;
      this.removeLoadingState();
      $firstChildren = this.$el.children().eq(0);
      scrollOffset = $firstChildren.offset().top - $(window).scrollTop();
      $markup = $(markup).prependTo(this.$el);
      $(window).scrollTop($firstChildren.offset().top - scrollOffset);
      return this.$el.trigger("pageloaded", [$markup]);
    };

    PreviousPageHandler.prototype.setLoadingState = function() {
      this.loading = true;
      this.$el.addClass('loading');
      return this.$previousDataButton.addClass('loading');
    };

    PreviousPageHandler.prototype.removeLoadingState = function() {
      this.loading = false;
      this.$el.removeClass('loading');
      return this.$previousDataButton.removeClass('loading');
    };

    return PreviousPageHandler;

  })();

  (function($) {
    $.fn.scrollablePagination = function(options) {
      var $this, data;
      $this = $(this);
      data = $this.data('scrollable-pagination');
      if (data) {
        return data;
      }
      return $this.data('scrollable-pagination', new ScrollablePagination.Container($this, options));
    };
    return $(function() {
      return $("[data-pagination='scrollable']").each(function(i, element) {
        var $el;
        $el = $(element);
        return $el.scrollablePagination({
          fetchUrl: $el.data("fetch-url")
        });
      });
    });
  })(jQuery);

}).call(this);
